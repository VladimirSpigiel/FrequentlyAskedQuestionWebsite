<?php

namespace Proxies\__CG__\Allotools\FaqBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Server extends \Allotools\FaqBundle\Entity\Server implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'lib', 'host', 'user', 'pwd', 'dbname', 'tbname', 'type_bdd', 'type_service');
        }

        return array('__isInitialized__', 'id', 'lib', 'host', 'user', 'pwd', 'dbname', 'tbname', 'type_bdd', 'type_service');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Server $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLib($lib)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLib', array($lib));

        return parent::setLib($lib);
    }

    /**
     * {@inheritDoc}
     */
    public function getLib()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLib', array());

        return parent::getLib();
    }

    /**
     * {@inheritDoc}
     */
    public function setHost($host)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHost', array($host));

        return parent::setHost($host);
    }

    /**
     * {@inheritDoc}
     */
    public function getHost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHost', array());

        return parent::getHost();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setPwd($pwd)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPwd', array($pwd));

        return parent::setPwd($pwd);
    }

    /**
     * {@inheritDoc}
     */
    public function getPwd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPwd', array());

        return parent::getPwd();
    }

    /**
     * {@inheritDoc}
     */
    public function setDbname($dbname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDbname', array($dbname));

        return parent::setDbname($dbname);
    }

    /**
     * {@inheritDoc}
     */
    public function getDbname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDbname', array());

        return parent::getDbname();
    }

    /**
     * {@inheritDoc}
     */
    public function setTbname($tbname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTbname', array($tbname));

        return parent::setTbname($tbname);
    }

    /**
     * {@inheritDoc}
     */
    public function getTbname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTbname', array());

        return parent::getTbname();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeBdd($typeBdd)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeBdd', array($typeBdd));

        return parent::setTypeBdd($typeBdd);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeBdd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeBdd', array());

        return parent::getTypeBdd();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeService($typeService)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeService', array($typeService));

        return parent::setTypeService($typeService);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeService()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeService', array());

        return parent::getTypeService();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

}
